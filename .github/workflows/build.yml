name: Build APK and Update Dependencies

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq imagemagick zip

      - name: Read config.json
        run: |
          CONFIG=$(cat config.json)
          echo "APP_NAME=$(echo $CONFIG | jq -r .app_name)" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$(echo $CONFIG | jq -r .package_name)" >> $GITHUB_ENV
          echo "VERSION=$(echo $CONFIG | jq -r .version)" >> $GITHUB_ENV
          echo "VERSION_NAME=$(echo $CONFIG | jq -r .version | cut -d'+' -f1)" >> $GITHUB_ENV
          echo "VERSION_CODE=$(echo $CONFIG | jq -r .version | cut -d'+' -f2)" >> $GITHUB_ENV

      - name: Remove package attribute from AndroidManifest.xml
        run: |
          sed -i 's/package="[^"]*"//' android/app/src/main/AndroidManifest.xml

      - name: Run flutter pub outdated and save JSON
        run: flutter pub outdated --json > outdated.json

      - name: Update pubspec.yaml with latest compatible versions
        run: |
          cat outdated.json | jq -r '.packages[] | select(.upgradable) | "\(.package) \(.latest.version)"' | while read package version; do
            echo "Updating $package to ^$version"
            safe_version=$(echo "^$version" | sed 's/\./\\./g; s/\//\\\//g')
            sed -i "s|^  $package:.*|  $package: $safe_version|" pubspec.yaml
          done
          rm outdated.json

      - name: Replace {{APP_NAME}} in lib/main.dart
        run: |
          sed -i "s/{{APP_NAME}}/${APP_NAME}/g" lib/main.dart

      - name: Update Android app_name in strings.xml
        run: |
          sed -i "s|<string name=\"app_name\">.*</string>|<string name=\"app_name\">${APP_NAME}</string>|" android/app/src/main/res/values/strings.xml

      - name: Update version in pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: $VERSION/" pubspec.yaml

      - name: Update build.gradle.kts
        run: |
          sed -i "s|namespace = \".*\"|namespace = \"${PACKAGE_NAME}\"|" android/app/build.gradle.kts
          sed -i "s|applicationId = \".*\"|applicationId = \"${PACKAGE_NAME}\"|" android/app/build.gradle.kts
          sed -i "s|minSdk = .*|minSdk = 23|" android/app/build.gradle.kts
          sed -i "s|targetSdk = .*|targetSdk = 35|" android/app/build.gradle.kts
          sed -i "s|versionCode = .*|versionCode = ${VERSION_CODE}|" android/app/build.gradle.kts
          sed -i "s|versionName = \".*\"|versionName = \"${VERSION_NAME}\"|" android/app/build.gradle.kts
          sed -i "s|ndkVersion = .*|ndkVersion = \"27.0.12077973\"|" android/app/build.gradle.kts

      - name: Move MainActivity.kt based on package
        run: |
          SRC_DIR="android/app/src/main/kotlin"
          PACKAGE_PATH=$(echo "$PACKAGE_NAME" | tr '.' '/')
          CURRENT_PATH=$(find $SRC_DIR -type f -name "MainActivity.kt" | head -n 1)
          if [ ! -f "$SRC_DIR/$PACKAGE_PATH/MainActivity.kt" ]; then
            mkdir -p "$SRC_DIR/$PACKAGE_PATH"
            mv "$CURRENT_PATH" "$SRC_DIR/$PACKAGE_PATH/MainActivity.kt"
            sed -i "s|^package .*|package $PACKAGE_NAME|" "$SRC_DIR/$PACKAGE_PATH/MainActivity.kt"
          fi

      - name: Apply icon.png as Android app icon
        run: |
          for dpi in mdpi:48 hdpi:72 xhdpi:96 xxhdpi:144 xxxhdpi:192; do
            folder=$(echo $dpi | cut -d':' -f1)
            size=$(echo $dpi | cut -d':' -f2)
            mkdir -p android/app/src/main/res/mipmap-$folder
            convert icon.png -resize ${size}x${size} android/app/src/main/res/mipmap-$folder/ic_launcher.png
          done

      - name: Flutter clean
        run: flutter clean

      - name: Flutter pub get
        run: flutter pub get

      - name: Build APK (release, minified, split per ABI)
        run: flutter build apk --release --split-per-abi

      - name: Upload APK - armeabi-v7a
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ env.APP_NAME }}-${{ env.VERSION_NAME }}-armeabi-v7a-release
          path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk

      - name: Upload APK - arm64-v8a
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ env.APP_NAME }}-${{ env.VERSION_NAME }}-arm64-v8a-release
          path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk

      - name: Upload APK - x86_64
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ env.APP_NAME }}-${{ env.VERSION_NAME }}-x86_64-release
          path: build/app/outputs/flutter-apk/app-x86_64-release.apk

      - name: Create ZIP of all APKs
        run: |
          cd build/app/outputs/flutter-apk
          zip -r all_apks.zip ./*.apk

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-apks-${{ env.APP_NAME }}-${{ env.VERSION_NAME }}
          path: build/app/outputs/flutter-apk/all_apks.zip
